{{- $stack := .Values.Images -}}
{{- $variant := .RawData.variant -}}
{{- $node_version := .RawData.node_version -}}

FROM php:{{ $stack.php_version }}-{{ $variant }}

LABEL authors="Julien Neuhart <j.neuhart@thecodingmachine.com>, David NÃ©grier <d.negrier@thecodingmachine.com>"


# |--------------------------------------------------------------------------
# | Main PHP extensions
# |--------------------------------------------------------------------------
# |
# | Installs the main PHP extensions
# |

# Install php extensions
# Shamelessly borrowed from https://github.com/TetraWeb/docker/
RUN buildDeps=" \
        freetds-dev \
        libbz2-dev \
        libc-client-dev \
        libenchant-dev \
        libfreetype6-dev \
        libgmp3-dev \
        libicu-dev \
        libjpeg62-turbo-dev \
        libkrb5-dev \
        libldap2-dev \
        libmcrypt-dev \
        libmemcached-dev \
        libpng12-dev \
        libpq-dev \
        libpspell-dev \
        librabbitmq-dev \
        libsasl2-dev \
        libsnmp-dev \
        libssl-dev \
        libtidy-dev \
        libxml2-dev \
        libxpm-dev \
        libxslt1-dev \
        libyaml-dev \
        zlib1g-dev \
    " \
    && phpModules=" \
        bcmath bz2 calendar dba enchant exif ftp gd gettext gmp imap intl ldap mbstring mcrypt mysqli opcache pcntl pdo pdo_dblib pdo_mysql pdo_pgsql pgsql pspell shmop snmp soap sockets sysvmsg sysvsem sysvshm tidy wddx xmlrpc xsl zip xdebug \
    " \
    && sed -i "s/jessie main/jessie main contrib non-free/" /etc/apt/sources.list \
    && apt-get update && apt-get install -y libc-client2007e libenchant1c2a libfreetype6 libicu52 libjpeg62-turbo libmcrypt4 libpng12-0 libpq5 libsybdb5 libtidy-0.99-0 libx11-6 libxpm4 libxslt1.1 snmp bind9-host cron git nano --no-install-recommends \
    && apt-get install -y $buildDeps --no-install-recommends \
    && docker-php-source extract \
    && cd /usr/src/php/ext/ \
    && curl -L http://xdebug.org/files/xdebug-{{ $stack.xdebug_version }}.tgz | tar -zxf - \
    && mv xdebug-{{ $stack.xdebug_version }} xdebug \
    && ln -s /usr/include/x86_64-linux-gnu/gmp.h /usr/include/gmp.h \
    && ln -s /usr/lib/x86_64-linux-gnu/libldap_r.so /usr/lib/libldap.so \
    && ln -s /usr/lib/x86_64-linux-gnu/libldap_r.a /usr/lib/libldap_r.a \
    && ln -s /usr/lib/x86_64-linux-gnu/libsybdb.a /usr/lib/libsybdb.a \
    && ln -s /usr/lib/x86_64-linux-gnu/libsybdb.so /usr/lib/libsybdb.so \
    && docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ --with-xpm-dir=/usr/include/ \
    && docker-php-ext-configure imap --with-imap --with-kerberos --with-imap-ssl \
    && docker-php-ext-configure ldap --with-ldap-sasl \
    && docker-php-ext-install $phpModules \
    && printf "\n" | pecl install amqp \
    && pecl install igbinary \
    && printf "\n" | pecl install memcached \
    && pecl install mongodb \
    && pecl install redis \
    && pecl install apcu \
    && pecl install yaml \
    && pecl install ast \
    && pecl install weakref-beta \
    && for ext in $phpModules; do \
           rm -f /usr/local/etc/php/conf.d/docker-php-ext-$ext.ini; \
       done \
    && docker-php-source delete \
    && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false -o APT::AutoRemove::SuggestsImportant=false $buildDeps
    && echo 'extension=zip.so' > /usr/local/etc/php/conf.d/generated_conf.ini

# |--------------------------------------------------------------------------
# | Xdebug
# |--------------------------------------------------------------------------
# |
# | Installs Xdebug, a tool for easily debugging your PHP code.
# |

#ENV XDEBUG_VERSION {{ $stack.xdebug_version }}

#RUN mkdir -p /usr/src/php/ext/xdebug &&\
#    curl -L https://github.com/xdebug/xdebug/archive/$XDEBUG_VERSION.tar.gz | tar xvz -C /usr/src/php/ext/xdebug --strip 1 &&\
#    echo 'xdebug' >> /usr/src/php-available-exts &&\
#    docker-php-ext-install xdebug &&\
#    { \
#        echo 'xdebug.remote_enable=on'; \
#        echo 'xdebug.remote_autostart=off'; \
#        echo 'xdebug.remote_port=9000'; \
#        echo 'xdebug.remote_handler=dbgp'; \
#        echo 'xdebug.remote_connect_back=0'; \
#    } >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini

# |--------------------------------------------------------------------------
# | Composer
# |--------------------------------------------------------------------------
# |
# | Installs Composer to easily manage your PHP dependencies.
# |
ENV COMPOSER_ALLOW_SUPERUSER 1

RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer &&\
    chmod +x /usr/local/bin/composer

# |--------------------------------------------------------------------------
# | prestissimo
# |--------------------------------------------------------------------------
# |
# | Installs Prestissimo to improve Composer download performance.
# |

RUN composer global require hirak/prestissimo

{{if .RawData.node_version }}
# |--------------------------------------------------------------------------
# | NodeJS
# |--------------------------------------------------------------------------
# |
# | Installs NodeJS and npm. The later will allow you to easily manage
# | your frontend dependencies.
# |

RUN curl -sL https://deb.nodesource.com/setup_{{ $node_version }} | bash - &&\
    apt-get update &&\
    apt-get install -y --no-install-recommends nodejs

# |--------------------------------------------------------------------------
# | yarn
# |--------------------------------------------------------------------------
# |
# | Installs yarn. It provides some nice improvements over npm.
# |

RUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - &&\
    echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list &&\
    apt-get update &&\
    apt-get install -y --no-install-recommends yarn

# |--------------------------------------------------------------------------
# | PATH updating
# |--------------------------------------------------------------------------
# |
# | Let's add ./node_modules/.bin to the PATH (utility function to use NPM bin easily)
# |
ENV PATH="$PATH:./node_modules/.bin"
{{end}}

{{if eq $variant "apache" }}
ENV APACHE_DOCUMENT_ROOT /var/www/html

RUN sed -ri -e 's!/var/www/html!/var/www/html/${APACHE_DOCUMENT_ROOT}!g' /etc/apache2/sites-available/*.conf
RUN sed -ri -e 's!/var/www/!/var/www/html/${APACHE_DOCUMENT_ROOT}!g' /etc/apache2/apache2.conf /etc/apache2/conf-available/*.conf

# |--------------------------------------------------------------------------
# | Apache mod_rewrite
# |--------------------------------------------------------------------------
# |
# | Enables Apache mod_rewrite.
# |

RUN a2enmod rewrite
{{end}}

# |--------------------------------------------------------------------------
# | PATH updating
# |--------------------------------------------------------------------------
# |
# | Let's add ./vendor/bin to the PATH (utility function to use Composer bin easily)
# |
ENV PATH="$PATH:./vendor/bin:~/.composer/vendor/bin"

# |--------------------------------------------------------------------------
# | Default PHP extensions to be enabled
# |--------------------------------------------------------------------------
ENV ENABLE_APCU_EXTENSION=1 \
    ENABLE_MBSTRING_EXTENSION=1 \
    ENABLE_MYSQLI_EXTENSION=1 \
    ENABLE_OPCACHE_EXTENSION=1 \
    ENABLE_PDO_EXTENSION=1 \
    ENABLE_PDO_MYSQL_EXTENSION=1 \
    ENABLE_REDIS_EXTENSION=1 \
    ENABLE_ZIP_EXTENSION=1 \
    ENABLE_SOAP_EXTENSION=1


# |--------------------------------------------------------------------------
# | .bashrc updating
# |--------------------------------------------------------------------------
# |
# | Let's update the .bashrc to add nice aliases
# |

RUN composer global require bamarni/symfony-console-autocomplete

RUN echo 'eval "$(symfony-autocomplete)"' > ~/.bash_profile

RUN { \
        echo "alias ls='ls --color=auto'"; \
        echo "alias ll='ls --color=auto -alF'"; \
        echo "alias la='ls --color=auto -A'"; \
        echo "alias l='ls --color=auto -CF'"; \
    } >> ~/.bashrc


# |--------------------------------------------------------------------------
# | Entrypoint
# |--------------------------------------------------------------------------
# |
# | Defines the entrypoint.
# |

ENV IMAGE_VARIANT={{$variant}}

COPY utils/docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh
COPY utils/generate_conf.php /usr/local/bin/generate_conf.php
COPY utils/generate_cron.php /usr/local/bin/generate_cron.php

ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]

{{if eq $variant "apache" }}
CMD ["/usr/sbin/apachectl", "-DFOREGROUND"]
{{end}}
